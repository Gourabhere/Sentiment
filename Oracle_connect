import React, { useState } from 'react';
import { UIShell, GlobalFooter, AvatarMenu } from '@citi-icg-172888/icgds-patterns-react';
import { Menu, Switch, Button, themes } from '@citi-icg-172888/icgds-react';
import '@citi-icg-172888/icgds/dist/css/icgds.css';
import citilogofooter from '@citi-icg-172888/icgds-icons/logos/Citi_Logo.svg';
import citilogo from '@citi-icg-172888/icgds-icons/logos/28px/Citi_Logo.svg';
import citilogoAlt from '@citi-icg-172888/icgds-icons/logos/28px/Citi_Logo_Alternative.svg';

export default function MergedComponent() {
  const states = ['Alabama', 'Alaska', /*...*/ 'Wyoming'];
  const [theme, setTheme] = useState(themes.LIGHT);
  const [profile, setProfile] = useState('');
  const [loginTime, setLogInTime] = useState(new Date().toLocaleTimeString());

  const links = [
    { label: 'Terms and Conditions', url: 'https://secure.citi.com/brandcentral/site/assets/downloads/footer/citi_brand_central_terms_and_conditions.pdf' },
    { label: 'Privacy', url: 'https://secure.citi.com/brandcentral/site/assets/downloads/footer/citi_brand_central_privacy_policy.pdf' },
    { label: 'Contact Us', url: 'https://secure.citi.com/brandcentral/site/contact' },
    { label: 'Our Mission and Value Proposition', url: 'https://www.citigroup.com/citi/about/mission-and-value-proposition.html' },
  ];

  const handleClick = (e) => {
    if (e.keyPath.includes('theme')) {
      setTheme(e.key === 'light' ? themes.LIGHT : themes.DARK);
    } else if (e.keyPath.includes('profile')) {
      setProfile(e.key);
    }
  };

  const login = () => {
    setLogInTime(new Date().toLocaleTimeString());
  };

  const loginButton = <Button onClick={login}>Log In</Button>;

  const onLogout = () => {
    setLogInTime(undefined);
  };

  const innerMenu = (
    <Menu mode="vertical" selectable={false} onClick={handleClick}>
      <Menu.SubMenu key="theme" title="Theme">
        <Menu.Item className={theme === themes.LIGHT ? 'selected' : ''} key={themes.LIGHT}>Light</Menu.Item>
        <Menu.Item className={theme === themes.DARK ? 'selected' : ''} key={themes.DARK}>Dark</Menu.Item>
      </Menu.SubMenu>
      <Menu.SubMenu key="profile" title="Profile">
        <Menu.Item className={profile === 'institutional' ? 'selected' : ''} key="institutional">Institutional</Menu.Item>
        <Menu.Item className={profile === 'corporation' ? 'selected' : ''} key="corporation">Corporation</Menu.Item>
        <Menu.SubMenu key="other" title="Other">
          <Menu.Item className={profile === 'other1' ? 'selected' : ''} key="other1">Option Other 1</Menu.Item>
          <Menu.Item className={profile === 'other2' ? 'selected' : ''} key="other2">Option Other 2</Menu.Item>
        </Menu.SubMenu>
      </Menu.SubMenu>
      <Menu.Item key="newsearch" className="lmn-d-flex">
        <span>New Search</span>
        <Switch wrapperClass="lmn-ml-auto" />
      </Menu.Item>
      <Menu.Divider />
      <Menu.Item key="openChart">Open Chart</Menu.Item>
      <Menu.Item key="share">Share This Page</Menu.Item>
      <Menu.Item key="homepage">Set Homepage</Menu.Item>
      <Menu.Divider />
      <Menu.Item key="minimize">Minimize</Menu.Item>
      <Menu.Divider />
      <Menu.Item key="reset">Reset Password</Menu.Item>
      <Menu.Item key="switch">Switch Account</Menu.Item>
    </Menu>
  );

  return (
    <div className={`icgds ${theme} theme`}>
      <UIShell
        showMenu={false}
        logoSrc={[citilogo, citilogoAlt]}
        logoHeight={28}
        appTitle="Global Left Nav"
        showSearch={true}
        searchOptions={states}
        navClasses="lmn-sticky-top"
        showThemeSwitch={true}
        showAppSwitch={false}
        sideBarExpanded={false}
        theme={theme}
        onThemeChange={(currTheme) => setTheme(currTheme)}
        showSidebar
        sidebarItems={[
          { key: 'menu1', icon: 'home', title: 'Home', tooltip: 'Home', content: 'Home' },
          { key: 'menu2', icon: 'transfer-horizontal', title: 'Transfer', tooltip: 'Transfer', content: 'Transfer' },
          { key: 'menu3', icon: 'calendar-dots', title: 'Calendar', tooltip: 'Calendar', content: 'Calendar' },
        ]}
        footerRender={<GlobalFooter logo={citilogofooter} links={links} />}
        avatarRender={
          <AvatarMenu
            displayType="anonymous"
            userId="tn12345"
            fullName="Test Email"
            email="test@citi.com"
            loginTime={loginTime}
            loggedOutRender={loginButton}
            menu={innerMenu}
            onLogout={onLogout}
          />
        }
      />
    </div>
  );
}
