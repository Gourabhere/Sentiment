import React, { useState, useEffect } from 'react';
import HighchartsReact from 'highcharts-react-official';
import Highcharts from 'highcharts';
import { merge } from 'lodash';

export default function SentimentBarChart({ isStyleMode, themeConfig }) {
    const [chartOptions, setChartOptions] = useState({});

    const modeConfig = {
        chart: {
            styledMode: isStyleMode,
        },
    };

    useEffect(() => {
        // Fetch sentiment data from your API endpoint
        fetch('/api/sentiment')
            .then(response => response.json())
            .then(data => {
                // Process the data to calculate total sentiment counts
                let negativeCount = 0;
                let neutralCount = 0;
                let positiveCount = 0;

                data.forEach(item => {
                    negativeCount += item.negativeScore || 0;
                    neutralCount += item.neutralScore || 0;
                    positiveCount += item.positiveScore || 0;
                });

                // Calculate total count
                const totalCount = negativeCount + neutralCount + positiveCount;

                // Determine overall sentiment based on counts
                let overallSentiment = 'Neutral';
                if (positiveCount > negativeCount && positiveCount > neutralCount) {
                    overallSentiment = 'Overwhelmingly Positive';
                } else if (negativeCount > positiveCount && negativeCount > neutralCount) {
                    overallSentiment = 'Overwhelmingly Negative';
                }

                const options = {
                    chart: {
                        type: 'bar', // Use bar chart, but we'll configure it for a segmented bar
                        renderTo: 'container-bar',
                        backgroundColor: '#f8f9fa' // Light background like the image
                    },
                    title: {
                        text: 'COMMUNITY SENTIMENT',
                        align: 'left'
                    },
                    subtitle: {
                        text: overallSentiment,
                        align: 'left',
                        style: {
                            fontWeight: 'bold',
                            fontSize: '18px'
                        }
                    },
                    xAxis: {
                        categories: ['Sentiment'], // Single category
                        title: {
                            text: null
                        },
                        labels: {
                            enabled: false // Hide category labels
                        }
                    },
                    yAxis: {
                        title: {
                            text: null
                        },
                        labels: {
                            enabled: false // Hide y-axis labels
                        },
                        gridLineWidth: 0 // Remove grid lines
                    },
                    series: [{
                        name: 'Sentiment',
                        data: [
                            { y: negativeCount, color: '#dc3545' }, // Red
                            { y: neutralCount, color: '#ffc107' },  // Yellow
                            { y: positiveCount, color: '#28a745' }  // Green
                        ],
                        stacking: 'normal', // Use stacking to create a segmented bar
                        dataLabels: {
                            enabled: true,
                            formatter: function () {
                                let label = this.point.y;
                                if (this.point.color === '#dc3545') {
                                    label += ' 🙁'; // Negative emoji
                                } else if (this.point.color === '#ffc107') {
                                    label += ' 😐'; // Neutral emoji
                                } else if (this.point.color === '#28a745') {
                                    label += ' 🙂'; // Positive emoji
                                }
                                return label;
                            },
                            style: {
                                fontSize: '14px'
                            }
                        }
                    }],
                    legend: {
                        enabled: false // Hide legend
                    },
                    plotOptions: {
                        bar: {
                            borderRadius: '5px',
                            dataLabels: {
                                enabled: true
                            }
                        }
                    },
                    credits: {
                        enabled: false // Remove Highcharts credits
                    },
                    tooltip: {
                        enabled: false // Disable tooltips
                    }
                };
                setChartOptions(options);
            })
            .catch(error => {
                console.error('Error fetching sentiment data', error);
            });
    }, [isStyleMode]); // Add isStyleMode as dependency

    return (
        <div id="container-bar">
            <HighchartsReact
                highcharts={Highcharts}
                options={merge({}, chartOptions, isStyleMode ? themeConfig : {}, modeConfig)}
                immutable={true}
            />
        </div>
    );
}
