import React, { useState, useRef, useEffect } from 'react';
import { Select, Option, Card, Button, Modal } from '@citi-icg-172888/icgds-react';

// Placeholder for chart components (you can replace these with actual chart components)
const ChartPlaceholder = ({ title }) => (
  <div style={{ border: '1px solid #ddd', padding: '20px', borderRadius: '8px', height: '200px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
    <p>{title} Chart (Placeholder)</p>
  </div>
);

export default function Dashboard() {
  // State for modal visibility
  const [isModalVisible, setIsModalVisible] = useState(false);

  // State for team selection
  const [selectedTeam, setSelectedTeam] = useState('');

  // State to store selected values for each filter
  const [filters, setFilters] = useState({
    sprint: '',
    domain: '',
    tpm: '',
    issueType: '',
    capability: '',
    productOwner: '',
  });

  // Ref for the card header
  const cardHeaderRef = useRef();

  // Handle team selection change
  const handleTeamChange = (value) => {
    setSelectedTeam(value);
    console.log(`Selected Team: ${value}`);
  };

  // Handle change for each filter
  const onChange = (filterName, value) => {
    setFilters((prev) => ({
      ...prev,
      [filterName]: value,
    }));
    console.log(`Selected ${filterName}: ${value}`);
  };

  // Handle Apply button click
  const handleApply = () => {
    // Log the selected filters
    console.log('Applied Filters:', filters);

    // Example: Invoke a function to handle the applied filters
    applyFilters(filters);

    // Close the modal
    setIsModalVisible(false);
  };

  // Function to handle applied filters (replace with your actual logic)
  const applyFilters = (filterValues) => {
    console.log('Invoking applyFilters with values:', filterValues);
    // Example: Update charts or data based on filter values
  };

  // Handle Cancel button click (reset selections)
  const handleCancel = () => {
    setFilters({
      sprint: '',
      domain: '',
      tpm: '',
      issueType: '',
      capability: '',
      productOwner: '',
    });
    console.log('Filters reset');

    // Close the modal
    setIsModalVisible(false);
  };

  // Sample data for dropdowns (replace with actual data)
  const teamOptions = [
    { title: 'Team A', label: 'Team A', value: 'teamA' },
    { title: 'Team B', label: 'Team B', value: 'teamB' },
    { title: 'Team C', label: 'Team C', value: 'teamC' },
  ];

  const sprintOptions = [
    { title: 'Sprint 1', label: 'Sprint 1', value: 'sprint1' },
    { title: 'Sprint 2', label: 'Sprint 2', value: 'sprint2' },
    { title: 'Sprint 3', label: 'Sprint 3', value: 'sprint3' },
  ];

  const domainOptions = [
    { title: 'Domain A', label: 'Domain A', value: 'domainA' },
    { title: 'Domain B', label: 'Domain B', value: 'domainB' },
    { title: 'Domain C', label: 'Domain C', value: 'domainC' },
  ];

  const tpmOptions = [
    { title: 'TPM 1', label: 'TPM 1', value: 'tpm1' },
    { title: 'TPM 2', label: 'TPM 2', value: 'tpm2' },
    { title: 'TPM 3', label: 'TPM 3', value: 'tpm3' },
  ];

  const issueTypeOptions = [
    { title: 'Bug', label: 'Bug', value: 'bug' },
    { title: 'Feature', label: 'Feature', value: 'feature' },
    { title: 'Task', label: 'Task', value: 'task' },
  ];

  const capabilityOptions = [
    { title: 'Capability 1', label: 'Capability 1', value: 'capability1' },
    { title: 'Capability 2', label: 'Capability 2', value: 'capability2' },
    { title: 'Capability 3', label: 'Capability 3', value: 'capability3' },
  ];

  const productOwnerOptions = [
    { title: 'Owner 1', label: 'Owner 1', value: 'owner1' },
    { title: 'Owner 2', label: 'Owner 2', value: 'owner2' },
    { title: 'Owner 3', label: 'Owner 3', value: 'owner3' },
  ];

  // Common filter function for search
  const customizeFilter = (input, option) =>
    option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;

  return (
    <div style={{ padding: '20px' }}>
      {/* Tabs */}
      <div style={{ marginBottom: '20px' }}>
        <span style={{ marginRight: '20px', fontWeight: 'bold' }}>Perspective</span>
        <span style={{ marginRight: '20px' }}>Activity</span>
        <span style={{ marginRight: '20px' }}>Engineering</span>
        <span style={{ marginRight: '20px' }}>Finance</span>
      </div>

      {/* Team Selection and Advance Filter Button */}
      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px' }}>
        <div style={{ display: 'flex', alignItems: 'center', marginRight: '20px' }}>
          <label style={{ marginRight: '10px', fontSize: '14px', fontWeight: 'bold' }}>
            Team Name:
          </label>
          <Select
            showSearch
            highlightOption
            style={{ width: '200px' }}
            placeholder="Select Teams"
            onChange={handleTeamChange}
            optionLabelProp="label"
            customizeFilter={customizeFilter}
            getPopupContainer={() => document.querySelector('#app-content')}
            value={selectedTeam}
          >
            {teamOptions.map((option) => (
              <Option
                key={option.value}
                title={option.title}
                label={option.label}
                value={option.value}
              >
                {option.label}
              </Option>
            ))}
          </Select>
        </div>
        <Button
          onClick={() => setIsModalVisible(true)}
          style={{ background: '#005ea2', color: '#fff', border: 'none' }}
        >
          Advance Filter
        </Button>
      </div>

      {/* Charts Section */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '20px' }}>
        <ChartPlaceholder title="Success Rate" />
        <ChartPlaceholder title="Backlog Health" />
        <ChartPlaceholder title="Churn Rate" />
        <ChartPlaceholder title="Capacity Utilization" />
      </div>

      {/* Modal for Filters */}
      <Modal
        visible={isModalVisible}
        onCancel={() => setIsModalVisible(false)}
        footer={null}
        title="Extended Filters"
        style={{ maxWidth: '800px', margin: '0 auto' }}
      >
        <div style={{ padding: '20px' }}>
          {/* Row 1: Sprint and Domain */}
          <div style={{ display: 'flex', gap: '20px', marginBottom: '20px' }}>
            {/* Sprint Filter */}
            <div style={{ flex: '1' }}>
              <label
                style={{
                  display: 'block',
                  marginBottom: '5px',
                  fontSize: '14px',
                  color: '#333',
                }}
              >
                Sprint
              </label>
              <Select
                showSearch
                highlightOption
                style={{ width: '100%' }}
                placeholder="Select an option"
                onChange={(value) => onChange('sprint', value)}
                optionLabelProp="label"
                customizeFilter={customizeFilter}
                getPopupContainer={() => document.querySelector('#app-content')}
                value={filters.sprint}
              >
                {sprintOptions.map((option) => (
                  <Option
                    key={option.value}
                    title={option.title}
                    label={option.label}
                    value={option.value}
                  >
                    {option.label}
                  </Option>
                ))}
              </Select>
            </div>

            {/* Domain Filter */}
            <div style={{ flex: '1' }}>
              <label
                style={{
                  display: 'block',
                  marginBottom: '5px',
                  fontSize: '14px',
                  color: '#333',
                }}
              >
                Domain
              </label>
              <Select
                showSearch
                highlightOption
                style={{ width: '100%' }}
                placeholder="Select an option"
                onChange={(value) => onChange('domain', value)}
                optionLabelProp="label"
                customizeFilter={customizeFilter}
                getPopupContainer={() => document.querySelector('#app-content')}
                value={filters.domain}
              >
                {domainOptions.map((option) => (
                  <Option
                    key={option.value}
                    title={option.title}
                    label={option.label}
                    value={option.value}
                  >
                    {option.label}
                  </Option>
                ))}
              </Select>
            </div>
          </div>

          {/* Row 2: TPM and Issue Type */}
          <div style={{ display: 'flex', gap: '20px', marginBottom: '20px' }}>
            {/* TPM Filter */}
            <div style={{ flex: '1' }}>
              <label
                style={{
                  display: 'block',
                  marginBottom: '5px',
                  fontSize: '14px',
                  color: '#333',
                }}
              >
                TPM
              </label>
              <Select
                showSearch
                highlightOption
                style={{ width: '100%' }}
                placeholder="Select an option"
                onChange={(value) => onChange('tpm', value)}
                optionLabelProp="label"
                customizeFilter={customizeFilter}
                getPopupContainer={() => document.querySelector('#app-content')}
                value={filters.tpm}
              >
                {tpmOptions.map((option) => (
                  <Option
                    key={option.value}
                    title={option.title}
                    label={option.label}
                    value={option.value}
                  >
                    {option.label}
                  </Option>
                ))}
              </Select>
            </div>

            {/* Issue Type Filter */}
            <div style={{ flex: '1' }}>
              <label
                style={{
                  display: 'block',
                  marginBottom: '5px',
                  fontSize: '14px',
                  color: '#333',
                }}
              >
                Issue Type
              </label>
              <Select
                showSearch
                highlightOption
                style={{ width: '100%' }}
                placeholder="Select an option"
                onChange={(value) => onChange('issueType', value)}
                optionLabelProp="label"
                customizeFilter={customizeFilter}
                getPopupContainer={() => document.querySelector('#app-content')}
                value={filters.issueType}
              >
                {issueTypeOptions.map((option) => (
                  <Option
                    key={option.value}
                    title={option.title}
                    label={option.label}
                    value={option.value}
                  >
                    {option.label}
                  </Option>
                ))}
              </Select>
            </div>
          </div>

          {/* Row 3: Capability and Product Owner */}
          <div style={{ display: 'flex', gap: '20px', marginBottom: '20px' }}>
            {/* Capability Filter */}
            <div style={{ flex: '1' }}>
              <label
                style={{
                  display: 'block',
                  marginBottom: '5px',
                  fontSize: '14px',
                  color: '#333',
                }}
              >
                Capability
              </label>
              <Select
                showSearch
                highlightOption
                style={{ width: '100%' }}
                placeholder="Select an option"
                onChange={(value) => onChange('capability', value)}
                optionLabelProp="label"
                customizeFilter={customizeFilter}
                getPopupContainer={() => document.querySelector('#app-content')}
                value={filters.capability}
              >
                {capabilityOptions.map((option) => (
                  <Option
                    key={option.value}
                    title={option.title}
                    label={option.label}
                    value={option.value}
                  >
                    {option.label}
                  </Option>
                ))}
              </Select>
            </div>

            {/* Product Owner Filter */}
            <div style={{ flex: '1' }}>
              <label
                style={{
                  display: 'block',
                  marginBottom: '5px',
                  fontSize: '14px',
                  color: '#333',
                }}
              >
                Product Owner
              </label>
              <Select
                showSearch
                highlightOption
                style={{ width: '100%' }}
                placeholder="Select an option"
                onChange={(value) => onChange('productOwner', value)}
                optionLabelProp="label"
                customizeFilter={customizeFilter}
                getPopupContainer={() => document.querySelector('#app-content')}
                value={filters.productOwner}
              >
                {productOwnerOptions.map((option) => (
                  <Option
                    key={option.value}
                    title={option.title}
                    label={option.label}
                    value={option.value}
                  >
                    {option.label}
                  </Option>
                ))}
              </Select>
            </div>
          </div>

          {/* Buttons */}
          <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px', marginTop: '20px' }}>
            <Button onClick={handleCancel} style={{ background: 'transparent', border: '1px solid #666' }}>
              Cancel
            </Button>
            <Button onClick={handleApply} style={{ background: '#005ea2', color: '#fff', border: 'none' }}>
              Apply
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
}
