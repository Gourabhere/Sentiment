import React, { useState, useRef, useEffect } from 'react';
import cx from 'classnames';
import { UIShell, GlobalFooter, AvatarMenu } from '@citi-icg-172888/icgds-patterns-react';
import CustomizedContent from './CustomizedContent';
import { Tab, themes, Menu, Switch, Button, El, Card, Select } from '@citi-icg-172888/icgds-react';
import LineChart from './DataFetch/LineChart';
import FetchData from './DataFetch/FetchData';
import SuccessRate from './DataFetch/SuccessRate';
import citilogoFooter from '@citi-icg-172888/icgds-icons/logos/Citi_Logo.svg';
import citilogo from '@citi-icg-172888/icgds-icons/logos/28px/Citi_Logo.svg';
import citilogoAlt from '@citi-icg-172888/icgds-icons/logos/28px/Citi_Logo_Alternative.svg';
import Item from 'antd/es/list/Item';
import CapacityUtil from './DataFetch/CapacityUtil';
import SentimentBarChart from './DataFetch/SentimentAnalysis';

export default function LeftNav() {
  const [selectedTeam, setSelectedTeam] = useState(null);
  const [profile, setProfile] = useState('');
  const [logInTime, setLogInTime] = useState(new Date().toLocaleTimeString());
  const [teams, setTeams] = useState([]);

  useEffect(() => {
    fetch('http://sd-671h-4rv0:3030/api/teams')
      .then((response) => response.json())
      .then((data) => {
        if (Array.isArray(data) && data.length > 0) {
          setTeams(data.map((item) => [item[0], item[1]]));
        } else {
          console.error('Invalid data received from API');
        }
      })
      .catch((error) => {
        console.error('Error fetching teams: ', error);
      });
  }, []);

  const { Option } = Select;
  const onChange = (value) => {
    //console.log('Selected team: ', value);
  };
  const { SubMenu } = Menu;
  const states = [];
  const [theme, setTheme] = useState(themes.LIGHT);
  const [isFluidContainer, setIsFluidContainer] = useState(true);
  const [isOneCol, setIsOneCol] = useState(false);
  const [windowWidth, setWindowWidth] = useState(0);
  const [cardHeaderWidth, setCardHeaderWidth] = useState(0);
  const [gridCardWidth, setGridCardWidth] = useState(0);
  const cardHeaderRef = useRef();
  const gridCardRef = useRef();
  const firstRenerRef = useRef(true);
  const gridBreakpoints = [
    { key: 'xs', value: 0 },
    { key: 'sm', value: 584 },
    { key: 'md', value: 784 },
    { key: 'lg', value: 1072 },
    { key: 'xl', value: 1264 },
    { key: '2xl', value: 1680 },
  ];
  const gridBreakpointKeys = gridBreakpoints.map((v) => v.key);
  const gridBreakpointValues = gridBreakpoints.map((v) => v.value);

  const links = [
    {
      label: 'Terms and Conditions',
      url:
        'https://secure.citi.com/brandcentral/site/assets/downloads/footer/citi_brand_central_terms_and_conditions.pdf',
    },
    {
      label: 'Privacy',
      url:
        'https://secure.citi.com/brandcentral/site/assets/downloads/footer/citi_brand_central_privacy_policy.pdf',
    },
    {
      label: 'Contact Us',
      url: 'https://secure.citi.com/brandcentral/site/contact',
    },
    {
      label: 'Our Mision and Value Proposition',
      url: 'https://www.citigroup.com/citi/about/mission-and-value-proposition.html',
    },
  ];

  let breakpointText;
  let rangeText = '';
  let widthText = 'Unset';
  let upperIndex = gridBreakpointValues.findIndex(
    (v, index, arr) => index > 0 && v > windowWidth && windowWidth >= arr[index - 1]
  );
  let lowwerIndex = upperIndex - 1;
  if (upperIndex === -1) {
    lowwerIndex = gridBreakpointValues.length - 1;
    rangeText = `> ${gridBreakpointValues[lowwerIndex]}px`;
  } else {
    rangeText = `${gridBreakpointValues[lowwerIndex]}px - ${gridBreakpointValues[upperIndex]}px`;
  }
  breakpointText = gridBreakpointKeys[lowwerIndex].toUpperCase();
  widthText = !isFluidContainer && windowWidth > gridBreakpointValues[1] ? cardHeaderWidth : widthText;

  const handleClick = (e) => {
    if (e.keyPath.includes('theme')) {
      setTheme(e.key);
    } else if (e.keyPath.includes('profile')) {
      setProfile(e.key);
    }
  };

  const login = () => {
    setLogInTime(new Date().toLocaleTimeString());
  };

  const loginButton = <Button onClick={login}>Log in</Button>;

  const onLogout = () => {
    setLogInTime(undefined);
  };

  const removePadding = isOneCol && (breakpointText === 'SM' || breakpointText === 'XS');

  const updateWidth = () => {
    setWindowWidth(window.innerWidth);
    if (cardHeaderRef && cardHeaderRef.current) {
      setCardHeaderWidth(cardHeaderRef.current.offsetWidth);
    }
    if (gridCardRef && gridCardRef.current) {
      setGridCardWidth(gridCardRef.current.offsetWidth);
    }
  };

  const colCls = isOneCol ? 'lmn-col-2' : 'lmn-col-3 lmn-mt-24px';
  const cardCls = isOneCol ? 'lmn-col-2' : 'lmn-col-11 lmn-mt-8px';
  const sentCls = 'lmn-col-11 lmn-mt-24px';

  useEffect(() => {
    if (firstRenerRef.current === true) {
      firstRenerRef.current = false;
      updateWidth();
    }
  }, [firstRenerRef.current]);

  useEffect(() => {
    window.addEventListener('resize', updateWidth);
    return () => {
      window.removeEventListener('resize', updateWidth);
    };
  }, []);

  const innerMenu = (
    <Menu mode="vertical" selectable={false} onClick={handleClick}>
      <Menu.SubMenu key="theme" title="Theme">
        <Menu.Item className={theme === 'light' ? 'selected' : ''} key="light">
          Light
        </Menu.Item>
        <Menu.Item className={theme === 'dark' ? 'selected' : ''} key="dark">
          Dark
        </Menu.Item>
      </Menu.SubMenu>
      <Menu.SubMenu key="profile" title="Profile">
        <Menu.Item className={profile === 'institutional' ? 'selected' : ''} key="institutional">
          Institutional
        </Menu.Item>
        <Menu.Item className={profile === 'corporation' ? 'selected' : ''} key="corporation">
          Corporation
        </Menu.Item>
        <Menu.SubMenu key="other" title="Other">
          <Menu.Item className={profile === 'other1' ? 'selected' : ''} key="other1">
            Option Other 1
          </Menu.Item>
          <Menu.Item className={profile === 'other2' ? 'selected' : ''} key="other2">
            Option Other 2
          </Menu.Item>
        </Menu.SubMenu>
      </Menu.SubMenu>
      <Menu.Item key="newSearch" className="lmn-d-flex">
        <span>New Search</span>
        <Switch wrapperClass="lmn-ml-auto" />
      </Menu.Item>
      <Menu.Divider />
      <Menu.Item key="openChart">Open Chart</Menu.Item>
      <Menu.Item key="share">Share This Page</Menu.Item>
      <Menu.Item key="homepage">Set Homepage</Menu.Item>
      <Menu.Divider />
      <Menu.Item key="mimic">Mimic</Menu.Item>
      <Menu.Divider />
      <Menu.Item key="reset">Reset Password</Menu.Item>
      <Menu.Item key="switch">Switch Account</Menu.Item>
    </Menu>
  );

  return (
    <div className={`icgds-${theme}-theme`}>
      <UIShell
        fluidContainer={true}
        showMenu={false}
        logoSrc={[citilogo, citilogoAlt]}
        logoHeight={28}
        appTitle="Engineering Productivity Portal"
        showSearch={true}
        searchOptions={states}
        navClasses="lmn-sticky-top"
        showThemeSwitch={true}
        showAppSwitch={false}
        showAvatar={AvatarMenu}
        sideBarExpanded={false}
        theme={[theme]}
        onThemeChange={(crrtheme) => setTheme(crrtheme)}
        showSideBar={true}
        sideBarItems={[
          {
            key: 'menul',
            icon: 'home',
            title: 'Home',
            tooltip: false,
            content: 'Home',
            disabled: false,
            fluidContainer: { isFluidContainer },
          },
          {
            key: 'menu2',
            icon: 'components',
            title: false,
            tooltip: 'Contexts',
            content: (
              <div>
                <Menu
                  onClick={handleClick}
                  style={{ width: 150 }}
                  defaultSelectedKeys={['']}
                  defaultOpenKeys={['']}
                  mode="inline"
                >
                  <SubMenu key="sub1" title={<span >Contexts</span>}>
                    <Menu.Item key="1">Sprint</Menu.Item>
                    <Menu.Item key="2">Release</Menu.Item>
                    <Menu.Item key="3">Project</Menu.Item>
                  </SubMenu>
                </Menu>
              </div>
            ),
          },
          {
            key: 'menu4',
            icon: 'stack',
            title: 'PlaylistBuilder',
            tooltip: false,
            content: 'Playlist builder',
            disabled: false,
          },
          {
            key: 'menu5',
            icon: 'play-circle-o',
            title: 'SuggestedPlaylist',
            tooltip: false,
            content: 'Suggested Playlist',
            disabled: false,
          },
        ]}
        footerRender={() => <GlobalFooter logo={citilogoFooter} links={links} />}
        avatarRender={() => (
          <AvatarMenu
            displayType="anonymous"
            soeld="tn12345"
            fullName="Test"
            email="test@citi.com"
            loginTime={logInTime}
            loggedOutRender={loginButton}
            menu={innerMenu}
            onLogout={onLogout}
          />
        )}
      >
        <div>
          <Tab defaultActiveKey="1">
            <Tab.TabPane tab="Work" key="1">
              <El className="lmn-p-12px 1mn-px-sm-0 icgds-responsive-demo">
                <Card
                  hover
                  ref={cardHeaderRef}
                  className="Imn-shadow-1g 1mn-p-3 1mn-mb-5 lmn-bg-white Imn-border Imn-border-strong lmn-col-12 Imn-mt-4px"
                >
                  <Card.Body>
                    <div id="app-content" className="lmn-d-flex Imn-justify-content-center">
                      <div className="Imn-pr-24pm Imn-row Imn-p-8px icgds-responsive-demo Imn-font-weight-bold">
                        Team Name :
                      </div>
                      {teams.length > 0 && (
                        <CustomizedContent
                          teams={teams.map((item) => [item[0], item[1]])}
                          onTeamSelect={(teamId) => setSelectedTeam(teamId)}
                        />
                      )}
                    </div>
                  </Card.Body>
                </Card>
              </El>
              <El className="lmn-row lmn-p-12px 1mn-px-sm-0">
                <El key={"card_column_1"} className={colCls}>
                  <Card
                    hover
                    style={{ height: '300px' }}
                    className="Imn-shadow-1g 1mn-p-3 1mn-mb-5 1mn-bg-white lmn-border Imn-border-strong icgds-responsive-demo"
                  >
                    <p header className="Imn-h3 1mn-pb-24px">
                      Success Rate
                    </p>
                    <Card.Body>
                      <div style={{ padding: '0px', marginTop: '0px' }}>
                        <SuccessRate
                          selectedTeam={selectedTeam}
                          IsStyleMode={false}
                          themeConfig={{}}
                        />
                      </div>
                    </Card.Body>
                  </Card>
                </El>
                <El key={"card_column_2"} className={colCls}>
                  <Card
                    hover
                    style={{ height: '300px' }}
                    className="Imn-shadow-1g 1mn-p-3 lmn-mb-5 lmn-bg-white lmn-border Imn-border-strong icgds-responsive-demo"
                  >
                    <p header className="1mn-h3 1mn-pb-24px">
                      Backlog Health
                    </p>
                    <Card.Body>
                      <div style={{ padding: '0px', marginTop: '0px' }}>
                        <FetchData
                          selectedTeam={selectedTeam}
                          isStyleMode={false}
                          themeConfig={{}}
                        />
                      </div>
                    </Card.Body>
                  </Card>
                </El>
                <El key={"card_column_3"} className={colCls}>
                  <Card
                    hover
                    style={{ height: '300px' }}
                    className="Imn-shadow-1g Imn-p-3 Imn-mb-5 lmn-bg-white lmn-border Imn-border-strong icgds-responsive-demo"
                  >
                    <p header className="Imn-h3 1mn-pb-24px">
                      Churn Rate
                    </p>
                    <Card.Body>
                      <div style={{ padding: '0px', marginTop: '0px' }}>
                        {/* <SentimentBarChart
                          isStyleMode={false}
                          themeConfig={{}}
                        /> */}
                      </div>
                    </Card.Body>
                  </Card>
                </El>
                <El key={`card_column_4`} className={colCls}>
                  <Card
                    hover
                    style={{ height: '300px' }}
                    className="Imn-shadow-1g Imn-p-3 Imn-mb-5 lmn-bg-white lmn-border Imn-border-strong icgds-responsive-demo"
                  >
                    <p header className="Imn-h3 lmn-pb-24px">
                      Capacity Utilization
                      {/* { console.log('CapacityUtil : ', CapacityUtil) } */}
                    </p>
                    <Card.Body>
                      <div style={{ padding: '0px', marginTop: '0px' }}>
                        <CapacityUtil
                          selectedTeam={selectedTeam}
                          isStyleMode={false}
                          themeConfig={{}}
                        />
                      </div>
                    </Card.Body>
                  </Card>
                </El>
              </El>
              <El className="Imn-row lmn-p-12px 1mn-px-sm-0">
                <El className={sentCls}>
                  <Card
                    style={{ height: '250px' }}
                    className="1mn-px-2px Imn-p-12px Imn-shadow-1g 1mn-p-3 lmn-mb-5 Imn-bg-white lmn-border Imn-border-strong"
                  >
                    <div className="Imn-px-12px 1mn-p-12px">
                      {/* <LineChart selectedTeam={selectedTeam} isStyleMode={false} themeConfig={{}} /> */}
                      <SentimentBarChart
                        selectedTeam={selectedTeam}
                        isStyleMode={false}
                        themeConfig={{}}
                      />
                    </div>
                  </Card>
                </El>
              </El>
              <El className={cardCls}>
                <Card
                  hover
                  ref={gridCardRef}
                  style={{ height: '450px' }}
                  className="Imn-shadow-lg 1mn-p-3 lmn-mb-5 lmn-bg-white lmn-border Imn-border-strong lmn-col-12 Imn-mt-24px 1mn-page-card icgds-responsive-demo"
                >
                  <p header className="Imn-h2 1mn-pb-24px">
                    Chart Section
                  </p>
                  <Card.Body>
                    <div style={{ padding: '20px', marginTop: '20px' }}>
                      <LineChart
                        selectedTeam={selectedTeam}
                        isStyleMode={false}
                        themeConfig={{}}
                      />
                      {/* <SentimentBarChart selectedTeam={selectedTeam} isStyleMode={false} themeConfig={{}} /> */}
                    </div>
                  </Card.Body>
                </Card>
              </El>
            </Tab.TabPane>
            <Tab.TabPane tab="Finance" key="2">
              Perspective : Finance
            </Tab.TabPane>
            <Tab.TabPane tab="Architecture" key="3">
              Perspective : Architecture
            </Tab.TabPane>
          </Tab>
        </div>
      </UIShell>
    </div>
  );
}
